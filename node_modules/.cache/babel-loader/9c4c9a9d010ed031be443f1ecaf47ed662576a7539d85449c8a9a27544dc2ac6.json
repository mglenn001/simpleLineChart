{"ast":null,"code":"var _jsxFileName = \"/Users/miaglenn/Documents/Internship/simpleLineChart/src/Example.tsx\",\n  _s = $RefreshSig$();\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport * as React from 'react';\n\n// Define the structure for each data point from the API\n\n// Define the state structure for the Example component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Configuration for the API\nconst API_BASE_URL = 'http://localhost:8000';\nexport default function Example() {\n  _s();\n  // Initialize the component's state\n  const [state, setState] = React.useState({\n    data: [],\n    loading: true,\n    error: null\n  });\n\n  // useEffect hook to load data from FastAPI when the component mounts\n  React.useEffect(() => {\n    const loadDataFromAPI = async () => {\n      try {\n        setState(prevState => ({\n          ...prevState,\n          loading: true,\n          error: null\n        }));\n\n        // Fetch data from FastAPI endpoint\n        const response = await fetch(`${API_BASE_URL}/chart-data?limit=20`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const chartData = await response.json();\n\n        // Update the component's state with the fetched data\n        setState({\n          data: chartData,\n          loading: false,\n          error: null\n        });\n      } catch (err) {\n        // Handle any errors during fetching\n        const errorMessage = err instanceof Error ? err.message : 'Failed to load data from API';\n        setState({\n          data: [],\n          loading: false,\n          error: errorMessage\n        });\n        console.error('Error loading data from API:', err);\n      }\n    };\n    loadDataFromAPI();\n  }, []); // Empty dependency array means this effect runs once after the initial render\n\n  // Function to refresh data\n  const refreshData = () => {\n    setState(prevState => ({\n      ...prevState,\n      loading: true,\n      error: null\n    }));\n    // Trigger re-fetch by updating a dependency or calling the fetch function again\n    window.location.reload(); // Simple approach, or you could extract the fetch logic\n  };\n\n  // Render loading state\n  if (state.loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100%',\n        flexDirection: 'column'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading data from FastAPI...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '10px',\n          fontSize: '14px',\n          color: '#666'\n        },\n        children: [\"Make sure FastAPI server is running on \", API_BASE_URL]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render error state\n  if (state.error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100%',\n        flexDirection: 'column',\n        color: 'red'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error: \", state.error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: refreshData,\n        style: {\n          marginTop: '10px',\n          padding: '10px 20px',\n          backgroundColor: '#007bff',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '10px',\n          fontSize: '14px',\n          color: '#666'\n        },\n        children: [\"Make sure FastAPI server is running on \", API_BASE_URL]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render no data available state\n  if (state.data.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100%'\n      },\n      children: \"No data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Calculate the maximum Y-axis value for dynamic scaling\n  const allValues = [];\n  state.data.forEach(row => {\n    allValues.push(row.GeographicalAreaSqKms, row.PopulationDensity);\n  });\n  const maxYValue = allValues.length > 0 ? Math.max(...allValues) : 0;\n  const paddedMaxY = maxYValue > 0 ? maxYValue * 1.1 : 100;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: '10px',\n        backgroundColor: '#f8f9fa',\n        borderBottom: '1px solid #dee2e6',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          margin: '0 0 5px 0'\n        },\n        children: \"Karnataka Districts: Geographical Area vs Population Density\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: '0',\n          color: '#666',\n          fontSize: '14px'\n        },\n        children: [\"Data from FastAPI \\u2022 \", state.data.length, \" districts \\u2022\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: refreshData,\n          style: {\n            marginLeft: '10px',\n            padding: '5px 10px',\n            backgroundColor: '#28a745',\n            color: 'white',\n            border: 'none',\n            borderRadius: '3px',\n            cursor: 'pointer',\n            fontSize: '12px'\n          },\n          children: \"Refresh\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        height: 'calc(100% - 80px)'\n      },\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: state.data,\n          margin: {\n            top: 20,\n            right: 30,\n            left: 20,\n            bottom: 100\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"District\",\n            interval: 0,\n            angle: -45,\n            textAnchor: \"end\",\n            height: 100,\n            fontSize: 12\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            domain: [0, paddedMaxY]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            formatter: (value, name) => [typeof value === 'number' ? value.toLocaleString() : value, name === 'GeographicalAreaSqKms' ? 'Geographical Area (Sq.Kms)' : 'Population Density'],\n            labelFormatter: label => `District: ${label}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"GeographicalAreaSqKms\",\n            stroke: \"#8884d8\",\n            activeDot: {\n              r: 6\n            },\n            name: \"Geographical Area (Sq.Kms)\",\n            strokeWidth: 2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"PopulationDensity\",\n            stroke: \"#82ca9d\",\n            activeDot: {\n              r: 6\n            },\n            name: \"Population Density\",\n            strokeWidth: 2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n}\n_s(Example, \"TxHELW77CPZcSkAu1dlKjqmgrdg=\");\n_c = Example;\nvar _c;\n$RefreshReg$(_c, \"Example\");","map":{"version":3,"names":["LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","React","jsxDEV","_jsxDEV","API_BASE_URL","Example","_s","state","setState","useState","data","loading","error","useEffect","loadDataFromAPI","prevState","response","fetch","ok","Error","status","chartData","json","err","errorMessage","message","console","refreshData","window","location","reload","style","display","justifyContent","alignItems","height","flexDirection","children","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","fontSize","color","onClick","padding","backgroundColor","border","borderRadius","cursor","length","allValues","forEach","row","push","GeographicalAreaSqKms","PopulationDensity","maxYValue","Math","max","paddedMaxY","width","borderBottom","textAlign","margin","marginLeft","top","right","left","bottom","strokeDasharray","dataKey","interval","angle","textAnchor","domain","formatter","value","name","toLocaleString","labelFormatter","label","type","stroke","activeDot","r","strokeWidth","_c","$RefreshReg$"],"sources":["/Users/miaglenn/Documents/Internship/simpleLineChart/src/Example.tsx"],"sourcesContent":["import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport * as React from 'react';\n\n// Define the structure for each data point from the API\ninterface ChartData {\n  District: string;\n  GeographicalAreaSqKms: number;\n  PopulationDensity: number;\n}\n\n// Define the state structure for the Example component\ninterface ExampleState {\n  data: ChartData[];\n  loading: boolean;\n  error: string | null;\n}\n\n// Configuration for the API\nconst API_BASE_URL = 'http://localhost:8000';\n\nexport default function Example() {\n  // Initialize the component's state\n  const [state, setState] = React.useState<ExampleState>({\n    data: [],\n    loading: true,\n    error: null\n  });\n\n  // useEffect hook to load data from FastAPI when the component mounts\n  React.useEffect(() => {\n    const loadDataFromAPI = async () => {\n      try {\n        setState(prevState => ({ ...prevState, loading: true, error: null }));\n\n        // Fetch data from FastAPI endpoint\n        const response = await fetch(`${API_BASE_URL}/chart-data?limit=20`);\n        \n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const chartData: ChartData[] = await response.json();\n\n        // Update the component's state with the fetched data\n        setState({\n          data: chartData,\n          loading: false,\n          error: null\n        });\n      } catch (err) {\n        // Handle any errors during fetching\n        const errorMessage = err instanceof Error ? err.message : 'Failed to load data from API';\n        setState({\n          data: [],\n          loading: false,\n          error: errorMessage\n        });\n        console.error('Error loading data from API:', err);\n      }\n    };\n\n    loadDataFromAPI();\n  }, []); // Empty dependency array means this effect runs once after the initial render\n\n  // Function to refresh data\n  const refreshData = () => {\n    setState(prevState => ({ ...prevState, loading: true, error: null }));\n    // Trigger re-fetch by updating a dependency or calling the fetch function again\n    window.location.reload(); // Simple approach, or you could extract the fetch logic\n  };\n\n  // Render loading state\n  if (state.loading) {\n    return (\n      <div style={{ \n        display: 'flex', \n        justifyContent: 'center', \n        alignItems: 'center', \n        height: '100%',\n        flexDirection: 'column'\n      }}>\n        <div>Loading data from FastAPI...</div>\n        <div style={{ marginTop: '10px', fontSize: '14px', color: '#666' }}>\n          Make sure FastAPI server is running on {API_BASE_URL}\n        </div>\n      </div>\n    );\n  }\n  \n  // Render error state\n  if (state.error) {\n    return (\n      <div style={{ \n        display: 'flex', \n        justifyContent: 'center', \n        alignItems: 'center', \n        height: '100%',\n        flexDirection: 'column',\n        color: 'red'\n      }}>\n        <div>Error: {state.error}</div>\n        <button \n          onClick={refreshData}\n          style={{\n            marginTop: '10px',\n            padding: '10px 20px',\n            backgroundColor: '#007bff',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer'\n          }}\n        >\n          Retry\n        </button>\n        <div style={{ marginTop: '10px', fontSize: '14px', color: '#666' }}>\n          Make sure FastAPI server is running on {API_BASE_URL}\n        </div>\n      </div>\n    );\n  }\n  \n  // Render no data available state\n  if (state.data.length === 0) {\n    return (\n      <div style={{ \n        display: 'flex', \n        justifyContent: 'center', \n        alignItems: 'center', \n        height: '100%' \n      }}>\n        No data available\n      </div>\n    );\n  }\n\n  // Calculate the maximum Y-axis value for dynamic scaling\n  const allValues: number[] = [];\n  state.data.forEach(row => {\n    allValues.push(row.GeographicalAreaSqKms, row.PopulationDensity);\n  });\n\n  const maxYValue = allValues.length > 0 ? Math.max(...allValues) : 0;\n  const paddedMaxY = maxYValue > 0 ? maxYValue * 1.1 : 100;\n\n  return (\n    <div style={{ width: '100%', height: '100%' }}>\n      {/* Header with data info */}\n      <div style={{ \n        padding: '10px', \n        backgroundColor: '#f8f9fa', \n        borderBottom: '1px solid #dee2e6',\n        textAlign: 'center'\n      }}>\n        <h3 style={{ margin: '0 0 5px 0' }}>\n          Karnataka Districts: Geographical Area vs Population Density\n        </h3>\n        <p style={{ margin: '0', color: '#666', fontSize: '14px' }}>\n          Data from FastAPI • {state.data.length} districts • \n          <button \n            onClick={refreshData}\n            style={{\n              marginLeft: '10px',\n              padding: '5px 10px',\n              backgroundColor: '#28a745',\n              color: 'white',\n              border: 'none',\n              borderRadius: '3px',\n              cursor: 'pointer',\n              fontSize: '12px'\n            }}\n          >\n            Refresh\n          </button>\n        </p>\n      </div>\n\n      {/* Chart container */}\n      <div style={{ width: '100%', height: 'calc(100% - 80px)' }}>\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <LineChart\n            data={state.data}\n            margin={{\n              top: 20,\n              right: 30,\n              left: 20,\n              bottom: 100,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis \n              dataKey=\"District\" \n              interval={0} \n              angle={-45} \n              textAnchor=\"end\" \n              height={100}\n              fontSize={12}\n            />\n            <YAxis domain={[0, paddedMaxY]} />\n            <Tooltip \n              formatter={(value: number, name: string) => [\n                typeof value === 'number' ? value.toLocaleString() : value,\n                name === 'GeographicalAreaSqKms' ? 'Geographical Area (Sq.Kms)' : 'Population Density'\n              ]}\n              labelFormatter={(label: string) => `District: ${label}`}\n            />\n            <Legend />\n            <Line \n              type=\"monotone\" \n              dataKey=\"GeographicalAreaSqKms\" \n              stroke=\"#8884d8\" \n              activeDot={{ r: 6 }}\n              name=\"Geographical Area (Sq.Kms)\"\n              strokeWidth={2}\n            />\n            <Line \n              type=\"monotone\" \n              dataKey=\"PopulationDensity\" \n              stroke=\"#82ca9d\" \n              activeDot={{ r: 6 }}\n              name=\"Population Density\"\n              strokeWidth={2}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}