{"ast":null,"code":"var _jsxFileName = \"/Users/miaglenn/Documents/Internship/simpleLineChart/src/Example.tsx\",\n  _s = $RefreshSig$();\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport * as React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Example() {\n  _s();\n  const [state, setState] = React.useState({\n    data: [],\n    loading: true,\n    error: null\n  });\n  React.useEffect(() => {\n    const loadCSVData = () => {\n      fetch('/Area_Population_Density_and_Population_2011_Census.csv').then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to fetch CSV file');\n        }\n        return response.text();\n      }).then(csvText => {\n        // Simple CSV parser\n        const lines = csvText.split('\\n');\n        const headers = lines[0].split(',').map(h => h.trim());\n        const parsedData = [];\n        for (let i = 1; i < lines.length; i++) {\n          if (lines[i].trim()) {\n            const values = lines[i].split(',');\n            const row = {};\n            for (let j = 0; j < headers.length; j++) {\n              const header = headers[j];\n              const value = values[j] ? values[j].trim() : '';\n              // Try to convert to number, otherwise keep as string\n              const numValue = parseFloat(value);\n              row[header] = !isNaN(numValue) ? numValue : value;\n            }\n            parsedData.push(row);\n          }\n        }\n        setState({\n          data: parsedData,\n          loading: false,\n          error: null\n        });\n      }).catch(err => {\n        setState({\n          data: [],\n          loading: false,\n          error: 'Failed to load CSV data'\n        });\n        console.error('Error loading CSV:', err);\n      });\n    };\n    loadCSVData();\n  }, []);\n  if (state.loading) {\n    return /*#__PURE__*/React.createElement('div', null, 'Loading CSV data...');\n  }\n  if (state.error) {\n    return /*#__PURE__*/React.createElement('div', null, 'Error: ' + state.error);\n  }\n  if (state.data.length === 0) {\n    return /*#__PURE__*/React.createElement('div', null, 'No data available');\n  }\n\n  // Get the first few keys for line chart (excluding name/label column)\n  const allKeys = Object.keys(state.data[0]);\n  const numericKeys = [];\n  let nameKey = '';\n\n  // Find numeric and string columns\n  for (let i = 0; i < allKeys.length; i++) {\n    const key = allKeys[i];\n    const value = state.data[0][key];\n    if (typeof value === 'number') {\n      numericKeys.push(key);\n    } else if (typeof value === 'string' && !nameKey) {\n      nameKey = key;\n    }\n  }\n\n  // Use first 2 numeric columns\n  const dataKeys = numericKeys.slice(0, 2);\n\n  // Use first string column or first column as name key\n  if (!nameKey) {\n    nameKey = allKeys[0];\n  }\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: \"100%\",\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      width: 500,\n      height: 300,\n      data: state.data,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"pv\",\n        stroke: \"#8884d8\",\n        activeDot: {\n          r: 8\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"uv\",\n        stroke: \"#82ca9d\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n_s(Example, \"TxHELW77CPZcSkAu1dlKjqmgrdg=\");\n_c = Example;\nvar _c;\n$RefreshReg$(_c, \"Example\");","map":{"version":3,"names":["LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","React","jsxDEV","_jsxDEV","Example","_s","state","setState","useState","data","loading","error","useEffect","loadCSVData","fetch","then","response","ok","Error","text","csvText","lines","split","headers","map","h","trim","parsedData","i","length","values","row","j","header","value","numValue","parseFloat","isNaN","push","catch","err","console","createElement","allKeys","Object","keys","numericKeys","nameKey","key","dataKeys","slice","width","height","children","margin","top","right","left","bottom","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","type","stroke","activeDot","r","_c","$RefreshReg$"],"sources":["/Users/miaglenn/Documents/Internship/simpleLineChart/src/Example.tsx"],"sourcesContent":["import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport * as React from 'react';\n\ninterface ChartData {\n  [key: string]: string | number;\n}\n\ninterface ExampleState {\n  data: ChartData[];\n  loading: boolean;\n  error: string | null;\n}\n\nexport default function Example() {\n  const [state, setState] = React.useState<ExampleState>({\n    data: [],\n    loading: true,\n    error: null\n  });\n\n  React.useEffect(() => {\n    const loadCSVData = () => {\n      fetch('/Area_Population_Density_and_Population_2011_Census.csv')\n        .then((response) => {\n          if (!response.ok) {\n            throw new Error('Failed to fetch CSV file');\n          }\n          return response.text();\n        })\n        .then((csvText) => {\n          // Simple CSV parser\n          const lines = csvText.split('\\n');\n          const headers = lines[0].split(',').map((h: string) => h.trim());\n          \n          const parsedData: ChartData[] = [];\n          for (let i = 1; i < lines.length; i++) {\n            if (lines[i].trim()) {\n              const values = lines[i].split(',');\n              const row: ChartData = {};\n              for (let j = 0; j < headers.length; j++) {\n                const header = headers[j];\n                const value = values[j] ? values[j].trim() : '';\n                // Try to convert to number, otherwise keep as string\n                const numValue = parseFloat(value);\n                row[header] = !isNaN(numValue) ? numValue : value;\n              }\n              parsedData.push(row);\n            }\n          }\n          \n          setState({\n            data: parsedData,\n            loading: false,\n            error: null\n          });\n        })\n        .catch((err) => {\n          setState({\n            data: [],\n            loading: false,\n            error: 'Failed to load CSV data'\n          });\n          console.error('Error loading CSV:', err);\n        });\n    };\n\n    loadCSVData();\n  }, []);\n\n  if (state.loading) {\n    return React.createElement('div', null, 'Loading CSV data...');\n  }\n  \n  if (state.error) {\n    return React.createElement('div', null, 'Error: ' + state.error);\n  }\n  \n  if (state.data.length === 0) {\n    return React.createElement('div', null, 'No data available');\n  }\n\n  // Get the first few keys for line chart (excluding name/label column)\n  const allKeys = Object.keys(state.data[0]);\n  const numericKeys: string[] = [];\n  let nameKey = '';\n\n  // Find numeric and string columns\n  for (let i = 0; i < allKeys.length; i++) {\n    const key = allKeys[i];\n    const value = state.data[0][key];\n    if (typeof value === 'number') {\n      numericKeys.push(key);\n    } else if (typeof value === 'string' && !nameKey) {\n      nameKey = key;\n    }\n  }\n\n  // Use first 2 numeric columns\n  const dataKeys = numericKeys.slice(0, 2);\n  \n  // Use first string column or first column as name key\n  if (!nameKey) {\n    nameKey = allKeys[0];\n  }\n\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <LineChart\n        width={500}\n        height={300}\n        data={state.data}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}