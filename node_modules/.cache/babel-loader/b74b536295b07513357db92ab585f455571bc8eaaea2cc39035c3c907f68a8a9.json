{"ast":null,"code":"var _jsxFileName = \"/Users/miaglenn/Documents/Internship/simpleLineChart/src/Example.tsx\",\n  _s = $RefreshSig$();\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport * as React from 'react';\n\n// Define the structure for each data point in the chart\n\n// Define the state structure for the Example component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Example() {\n  _s();\n  // Initialize the component's state\n  const [state, setState] = React.useState({\n    data: [],\n    loading: true,\n    error: null\n  });\n\n  // useEffect hook to load CSV data when the component mounts\n  React.useEffect(() => {\n    const loadCSVData = () => {\n      // Fetch the CSV file from the public folder\n      fetch('/Area_Population_Density_and_Population_2011_Census.csv').then(response => {\n        // Check if the network response was successful\n        if (!response.ok) {\n          throw new Error('Failed to fetch CSV file');\n        }\n        // Return the response body as text\n        return response.text();\n      }).then(csvText => {\n        // Parse the CSV text into an array of objects\n        const lines = csvText.split('\\n');\n        // Get headers from the first line, trimming whitespace\n        const headers = lines[0].split(',').map(h => h.trim());\n        const parsedData = [];\n        // Iterate over lines starting from the second line (skipping headers)\n        for (let i = 1; i < lines.length; i++) {\n          if (lines[i].trim()) {\n            // Ensure the line is not empty\n            const values = lines[i].split(',');\n            const row = {};\n            // Map values to headers to create an object for each row\n            for (let j = 0; j < headers.length; j++) {\n              const header = headers[j];\n              const value = values[j] ? values[j].trim() : '';\n              // Attempt to convert value to a number; otherwise, keep as string\n              const numValue = parseFloat(value);\n              row[header] = !isNaN(numValue) ? numValue : value;\n            }\n            parsedData.push(row);\n          }\n        }\n\n        // Filter out the \"State Total\" row to avoid skewing the chart\n        // Assuming 'District' is the column containing 'State Total'\n        const nameKeyForFiltering = 'District'; // Explicitly set the key for filtering\n        const filteredData = parsedData.filter(row => {\n          const rowNameValue = nameKeyForFiltering ? String(row[nameKeyForFiltering]).toLowerCase() : '';\n          return rowNameValue !== 'state total';\n        });\n\n        // Take only the first 20 districts as requested\n        const finalData = filteredData.slice(0, 20);\n\n        // Update the component's state with the parsed and filtered data\n        setState({\n          data: finalData,\n          loading: false,\n          error: null\n        });\n      }).catch(err => {\n        // Handle any errors during fetching or parsing\n        setState({\n          data: [],\n          loading: false,\n          error: 'Failed to load CSV data'\n        });\n        console.error('Error loading CSV:', err);\n      });\n    };\n    loadCSVData(); // Call the function to load data\n  }, []); // Empty dependency array means this effect runs once after the initial render\n\n  // Render loading state\n  if (state.loading) {\n    return /*#__PURE__*/React.createElement('div', null, 'Loading CSV data...');\n  }\n\n  // Render error state\n  if (state.error) {\n    return /*#__PURE__*/React.createElement('div', null, 'Error: ' + state.error);\n  }\n\n  // Render no data available state\n  if (state.data.length === 0) {\n    return /*#__PURE__*/React.createElement('div', null, 'No data available');\n  }\n\n  // Define the data keys for the chart\n  const nameKey = 'District'; // X-axis will display District names\n  const dataKeys = ['Geograpical Area (Sq.Kms)', 'Population Density']; // Y-axis lines for these two metrics\n\n  // Calculate the maximum Y-axis value for dynamic scaling\n  const allNumericValues = [];\n  state.data.forEach(row => {\n    dataKeys.forEach(key => {\n      // Iterate through the specific dataKeys for the chart\n      if (typeof row[key] === 'number') {\n        allNumericValues.push(row[key]);\n      }\n    });\n  });\n  const maxYValue = allNumericValues.length > 0 ? Math.max(...allNumericValues) : 0;\n  // Add 10% padding to the max Y value for better visualization, or default to 100 if no data\n  const paddedMaxY = maxYValue > 0 ? maxYValue * 1.1 : 100;\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: \"100%\",\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      width: 500,\n      height: 300,\n      data: state.data,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: nameKey,\n        interval: 0,\n        angle: -45,\n        textAnchor: \"end\",\n        height: 100\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(YAxis, {\n        domain: [0, paddedMaxY]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), \" \", dataKeys.map((key, index) => /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: key,\n        stroke: index === 0 ? \"#8884d8\" : \"#82ca9d\" // Different colors for each line\n        ,\n        activeDot: {\n          r: 8\n        } // Larger dot on hover\n        ,\n        name: key // Display the full key name in the legend and tooltip\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_s(Example, \"TxHELW77CPZcSkAu1dlKjqmgrdg=\");\n_c = Example;\nvar _c;\n$RefreshReg$(_c, \"Example\");","map":{"version":3,"names":["LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","React","jsxDEV","_jsxDEV","Example","_s","state","setState","useState","data","loading","error","useEffect","loadCSVData","fetch","then","response","ok","Error","text","csvText","lines","split","headers","map","h","trim","parsedData","i","length","values","row","j","header","value","numValue","parseFloat","isNaN","push","nameKeyForFiltering","filteredData","filter","rowNameValue","String","toLowerCase","finalData","slice","catch","err","console","createElement","nameKey","dataKeys","allNumericValues","forEach","key","maxYValue","Math","max","paddedMaxY","width","height","children","margin","top","right","left","bottom","strokeDasharray","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","interval","angle","textAnchor","domain","index","type","stroke","activeDot","r","name","_c","$RefreshReg$"],"sources":["/Users/miaglenn/Documents/Internship/simpleLineChart/src/Example.tsx"],"sourcesContent":["import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport * as React from 'react';\n\n// Define the structure for each data point in the chart\ninterface ChartData {\n  [key: string]: string | number;\n}\n\n// Define the state structure for the Example component\ninterface ExampleState {\n  data: ChartData[];\n  loading: boolean;\n  error: string | null;\n}\n\nexport default function Example() {\n  // Initialize the component's state\n  const [state, setState] = React.useState<ExampleState>({\n    data: [],\n    loading: true,\n    error: null\n  });\n\n  // useEffect hook to load CSV data when the component mounts\n  React.useEffect(() => {\n    const loadCSVData = () => {\n      // Fetch the CSV file from the public folder\n      fetch('/Area_Population_Density_and_Population_2011_Census.csv')\n        .then((response) => {\n          // Check if the network response was successful\n          if (!response.ok) {\n            throw new Error('Failed to fetch CSV file');\n          }\n          // Return the response body as text\n          return response.text();\n        })\n        .then((csvText) => {\n          // Parse the CSV text into an array of objects\n          const lines = csvText.split('\\n');\n          // Get headers from the first line, trimming whitespace\n          const headers = lines[0].split(',').map((h: string) => h.trim());\n          \n          const parsedData: ChartData[] = [];\n          // Iterate over lines starting from the second line (skipping headers)\n          for (let i = 1; i < lines.length; i++) {\n            if (lines[i].trim()) { // Ensure the line is not empty\n              const values = lines[i].split(',');\n              const row: ChartData = {};\n              // Map values to headers to create an object for each row\n              for (let j = 0; j < headers.length; j++) {\n                const header = headers[j];\n                const value = values[j] ? values[j].trim() : '';\n                // Attempt to convert value to a number; otherwise, keep as string\n                const numValue = parseFloat(value);\n                row[header] = !isNaN(numValue) ? numValue : value;\n              }\n              parsedData.push(row);\n            }\n          }\n\n          // Filter out the \"State Total\" row to avoid skewing the chart\n          // Assuming 'District' is the column containing 'State Total'\n          const nameKeyForFiltering = 'District'; // Explicitly set the key for filtering\n          const filteredData = parsedData.filter(row => {\n            const rowNameValue = nameKeyForFiltering ? String(row[nameKeyForFiltering]).toLowerCase() : '';\n            return rowNameValue !== 'state total';\n          });\n          \n          // Take only the first 20 districts as requested\n          const finalData = filteredData.slice(0, 20);\n\n          // Update the component's state with the parsed and filtered data\n          setState({\n            data: finalData,\n            loading: false,\n            error: null\n          });\n        })\n        .catch((err) => {\n          // Handle any errors during fetching or parsing\n          setState({\n            data: [],\n            loading: false,\n            error: 'Failed to load CSV data'\n          });\n          console.error('Error loading CSV:', err);\n        });\n    };\n\n    loadCSVData(); // Call the function to load data\n  }, []); // Empty dependency array means this effect runs once after the initial render\n\n  // Render loading state\n  if (state.loading) {\n    return React.createElement('div', null, 'Loading CSV data...');\n  }\n  \n  // Render error state\n  if (state.error) {\n    return React.createElement('div', null, 'Error: ' + state.error);\n  }\n  \n  // Render no data available state\n  if (state.data.length === 0) {\n    return React.createElement('div', null, 'No data available');\n  }\n\n  // Define the data keys for the chart\n  const nameKey = 'District'; // X-axis will display District names\n  const dataKeys = ['Geograpical Area (Sq.Kms)', 'Population Density']; // Y-axis lines for these two metrics\n\n  // Calculate the maximum Y-axis value for dynamic scaling\n  const allNumericValues: number[] = [];\n  state.data.forEach(row => {\n    dataKeys.forEach(key => { // Iterate through the specific dataKeys for the chart\n      if (typeof row[key] === 'number') {\n        allNumericValues.push(row[key] as number);\n      }\n    });\n  });\n\n  const maxYValue = allNumericValues.length > 0 ? Math.max(...allNumericValues) : 0;\n  // Add 10% padding to the max Y value for better visualization, or default to 100 if no data\n  const paddedMaxY = maxYValue > 0 ? maxYValue * 1.1 : 100; \n\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <LineChart\n        width={500}\n        height={300}\n        data={state.data}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" /> {/* Grid lines for the chart */}\n        <XAxis dataKey={nameKey} interval={0} angle={-45} textAnchor=\"end\" height={100} /> {/* X-axis for Districts, rotated labels */}\n        <YAxis domain={[0, paddedMaxY]} /> {/* Y-axis with dynamic domain */}\n        <Tooltip /> {/* Tooltip for displaying data on hover */}\n        <Legend /> {/* Legend to identify lines */}\n        {/* Render a Line for each dataKey */}\n        {dataKeys.map((key: string, index: number) => (\n          <Line \n            key={key}\n            type=\"monotone\" \n            dataKey={key} \n            stroke={index === 0 ? \"#8884d8\" : \"#82ca9d\"} // Different colors for each line\n            activeDot={{ r: 8 }} // Larger dot on hover\n            name={key} // Display the full key name in the legend and tooltip\n          />\n        ))}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}