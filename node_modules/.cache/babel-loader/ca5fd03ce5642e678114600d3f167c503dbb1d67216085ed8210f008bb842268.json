{"ast":null,"code":"var _jsxFileName = \"/Users/miaglenn/Documents/Internship/simpleLineChart/src/Example.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, CartesianGrid } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Example = () => {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    // Function to fetch data from the backend\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/api/top-industries'); // Assuming your FastAPI server runs on port 8000\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const jsonData = await response.json();\n        setData(jsonData);\n      } catch (error) {\n        console.error('Failed to fetch data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Top Industries in India - Data Visualization\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), data.length > 0 ? /*#__PURE__*/_jsxDEV(BarChart, {\n      width: 1000,\n      height: 500,\n      data: data,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"rank\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"fixed_capital\",\n        fill: \"#8884d8\",\n        name: \"Fixed Capital\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        dataKey: \"total_persons_engaged\",\n        fill: \"#82ca9d\",\n        name: \"Total Persons Engaged\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(Example, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = Example;\nexport default Example;\nvar _c;\n$RefreshReg$(_c, \"Example\");","map":{"version":3,"names":["React","useEffect","useState","BarChart","Bar","XAxis","YAxis","Tooltip","Legend","CartesianGrid","jsxDEV","_jsxDEV","Example","_s","data","setData","fetchData","response","fetch","ok","Error","jsonData","json","error","console","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","length","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","fill","name","_c","$RefreshReg$"],"sources":["/Users/miaglenn/Documents/Internship/simpleLineChart/src/Example.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  CartesianGrid,\n} from 'recharts';\n\ninterface IndustryData {\n  rank: string;\n  total_no_of_factories: string;\n  no_of_factories_in_operation: string;\n  fixed_capital: string;\n  total_persons_engaged: string;\n  output: string;\n  gross_value_added: string;\n}\n\nconst Example: React.FC = () => {\n  const [data, setData] = useState<IndustryData[]>([]);\n\n  useEffect(() => {\n    // Function to fetch data from the backend\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/api/top-industries'); // Assuming your FastAPI server runs on port 8000\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const jsonData = await response.json();\n        setData(jsonData);\n      } catch (error) {\n        console.error('Failed to fetch data:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>Top Industries in India - Data Visualization</h1>\n      {data.length > 0 ? (\n        <BarChart width={1000} height={500} data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"rank\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Bar dataKey=\"fixed_capital\" fill=\"#8884d8\" name=\"Fixed Capital\" />\n          <Bar dataKey=\"total_persons_engaged\" fill=\"#82ca9d\" name=\"Total Persons Engaged\" />\n        </BarChart>\n      ) : (\n        <p>Loading data...</p>\n      )}\n    </div>\n  );\n};\n\nexport default Example;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}