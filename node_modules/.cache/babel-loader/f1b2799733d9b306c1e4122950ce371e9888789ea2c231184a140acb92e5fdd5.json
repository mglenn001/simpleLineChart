{"ast":null,"code":"var _jsxFileName = \"/Users/miaglenn/Documents/Internship/simpleLineChart/src/Example.tsx\",\n  _s = $RefreshSig$();\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Example() {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const loadCSVData = async () => {\n      try {\n        // Option 1: Load CSV from public folder\n        const response = await fetch('/data.csv');\n        const csvText = await response.text();\n\n        // Simple CSV parser\n        const lines = csvText.split('\\n');\n        const headers = lines[0].split(',').map(h => h.trim());\n        const parsedData = [];\n        for (let i = 1; i < lines.length; i++) {\n          if (lines[i].trim()) {\n            const values = lines[i].split(',');\n            const row = {};\n            headers.forEach((header, index) => {\n              var _values$index;\n              const value = (_values$index = values[index]) === null || _values$index === void 0 ? void 0 : _values$index.trim();\n              // Try to convert to number, otherwise keep as string\n              row[header] = !isNaN(Number(value)) ? Number(value) : value;\n            });\n            parsedData.push(row);\n          }\n        }\n        setData(parsedData);\n        setLoading(false);\n      } catch (err) {\n        setError('Failed to load CSV data');\n        setLoading(false);\n        console.error('Error loading CSV:', err);\n      }\n    };\n    loadCSVData();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading CSV data...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 21\n  }, this);\n  if (data.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"No data available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 33\n  }, this);\n\n  // Get the first few keys for line chart (excluding name/label column)\n  const dataKeys = Object.keys(data[0]).filter(key => typeof data[0][key] === 'number').slice(0, 2); // Take first 2 numeric columns\n\n  const nameKey = Object.keys(data[0]).find(key => typeof data[0][key] === 'string') || Object.keys(data[0])[0];\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: \"100%\",\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      width: 500,\n      height: 300,\n      data: data,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"pv\",\n        stroke: \"#8884d8\",\n        activeDot: {\n          r: 8\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"uv\",\n        stroke: \"#82ca9d\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(Example, \"C4fiAW6C7RZgaKDoEXQgZpbuUZg=\");\n_c = Example;\nvar _c;\n$RefreshReg$(_c, \"Example\");","map":{"version":3,"names":["LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","React","useState","useEffect","jsxDEV","_jsxDEV","Example","_s","data","setData","loading","setLoading","error","setError","loadCSVData","response","fetch","csvText","text","lines","split","headers","map","h","trim","parsedData","i","length","values","row","forEach","header","index","_values$index","value","isNaN","Number","push","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","dataKeys","Object","keys","filter","key","slice","nameKey","find","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","activeDot","r","_c","$RefreshReg$"],"sources":["/Users/miaglenn/Documents/Internship/simpleLineChart/src/Example.tsx"],"sourcesContent":["import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport React, { useState, useEffect } from 'react';\n\ninterface ChartData {\n  [key: string]: string | number;\n}\n\nexport default function Example() {\n  const [data, setData] = useState<ChartData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadCSVData = async () => {\n      try {\n        // Option 1: Load CSV from public folder\n        const response = await fetch('/data.csv');\n        const csvText = await response.text();\n        \n        // Simple CSV parser\n        const lines = csvText.split('\\n');\n        const headers = lines[0].split(',').map(h => h.trim());\n        \n        const parsedData: ChartData[] = [];\n        for (let i = 1; i < lines.length; i++) {\n          if (lines[i].trim()) {\n            const values = lines[i].split(',');\n            const row: ChartData = {};\n            headers.forEach((header, index) => {\n              const value = values[index]?.trim();\n              // Try to convert to number, otherwise keep as string\n              row[header] = !isNaN(Number(value)) ? Number(value) : value;\n            });\n            parsedData.push(row);\n          }\n        }\n        \n        setData(parsedData);\n        setLoading(false);\n      } catch (err) {\n        setError('Failed to load CSV data');\n        setLoading(false);\n        console.error('Error loading CSV:', err);\n      }\n    };\n\n    loadCSVData();\n  }, []);\n\n  if (loading) return <div>Loading CSV data...</div>;\n  if (error) return <div>Error: {error}</div>;\n  if (data.length === 0) return <div>No data available</div>;\n\n  // Get the first few keys for line chart (excluding name/label column)\n  const dataKeys = Object.keys(data[0]).filter(key => \n    typeof data[0][key] === 'number'\n  ).slice(0, 2); // Take first 2 numeric columns\n\n  const nameKey = Object.keys(data[0]).find(key => \n    typeof data[0][key] === 'string'\n  ) || Object.keys(data[0])[0];\n\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <LineChart\n        width={500}\n        height={300}\n        data={data}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}